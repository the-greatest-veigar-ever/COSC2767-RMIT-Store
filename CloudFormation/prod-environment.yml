AWSTemplateFormatVersion: "2010-09-09"
Description: " production environment with custom VPC, front-end and back-end EC2 instances in Auto Scaling Groups (no ALB)."

Parameters:
  # --------------------------------------------------
  # Key pair & AMI IDs
  # --------------------------------------------------
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing EC2 KeyPair for SSH access."

  ImageIdFrontEnd:
    Type: AWS::EC2::Image::Id
    Description: "The AMI ID for the Front-End EC2 instance."

  ImageIdBackEnd:
    Type: AWS::EC2::Image::Id
    Description: "The AMI ID for the Back-End EC2 instance."

  # --------------------------------------------------
  # Networking
  # --------------------------------------------------
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: "CIDR block for the custom VPC"

  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: "CIDR block for Public Subnet A"

  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: "CIDR block for Public Subnet B"

  # --------------------------------------------------
  # Security / Access
  # --------------------------------------------------
  TrustedSSHCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: "CIDR block for SSH access to EC2 instances"

  # --------------------------------------------------
  # Docker Swarm Master Info
  # --------------------------------------------------
  SwarmMasterToken:
    Type: String
    Description: "Docker Swarm join token for worker nodes"

  SwarmMasterIP:
    Type: String
    Description: "Private IP address of the Docker Swarm master node"

  # --------------------------------------------------
  # Hostnames for Instances
  # --------------------------------------------------
  HostnameFE:
    Type: String
    Default: "FrontEnd"
    Description: "Hostname for Front-End EC2 instances"

  HostnameBE:
    Type: String
    Default: "BackEnd"
    Description: "Hostname for Back-End EC2 instances"

Resources:
  # ==================================================
  # 1) VPC & Networking
  # ==================================================
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MainVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MainInternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PublicSubnetA

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PublicSubnetB

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  # ==================================================
  # 2) Security Groups
  # ==================================================
  FrontEndSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Wide open SG for Front-End"
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "FrontEndSG"

  BackEndSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Wide open SG for Back-End"
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "BackEndSG"

  # ==================================================
  # 3) Launch Templates
  # ==================================================
  FrontEndLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "FrontEndLaunchTemplate"
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: !Ref ImageIdFrontEnd
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref FrontEndSG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            HOSTNAME=${HostnameFE}
            hostnamectl set-hostname "$HOSTNAME"

            yum update -y
            yum install -y docker
            systemctl enable docker
            systemctl start docker

            # Force leave swarm, reboot, then join again
            sudo docker swarm leave --force
            sudo reboot
            sleep 45
            sudo docker swarm join --token ${SwarmMasterToken} ${SwarmMasterIP}:2377

  BackEndLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "BackEndLaunchTemplate"
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: !Ref ImageIdBackEnd
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref BackEndSG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            HOSTNAME=${HostnameBE}
            hostnamectl set-hostname "$HOSTNAME"

            yum update -y
            yum install -y docker
            systemctl enable docker
            systemctl start docker

            # Example: also install Mongo
            # (If you don't need it, remove these lines)
            sudo tee /etc/yum.repos.d/mongodb-org-6.0.repo <<EOF
            [mongodb-org-6.0]
            name=MongoDB Repository
            baseurl=https://repo.mongodb.org/yum/amazon/2023/mongodb-org/6.0/x86_64/
            gpgcheck=1
            enabled=1
            gpgkey=https://www.mongodb.org/static/pgp/server-6.0.asc
            EOF
            yum install -y mongodb-org
            yum install -y mongodb-mongosh-shared-openssl3

            # Force leave swarm, reboot, then join again
            sudo docker swarm leave --force
            sudo reboot
            sleep 45
            sudo docker swarm join --token ${SwarmMasterToken} ${SwarmMasterIP}:2377

  # ==================================================
  # 4) Auto Scaling Groups (no ALB references)
  # ==================================================
  FrontEndASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "FrontEndASG"
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontEndLaunchTemplate
        Version: !GetAtt FrontEndLaunchTemplate.LatestVersionNumber
      MinSize: "1"
      DesiredCapacity: "1"
      MaxSize: "3"
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: FrontEndASG
          PropagateAtLaunch: true

  BackEndASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "BackEndASG"
      LaunchTemplate:
        LaunchTemplateId: !Ref BackEndLaunchTemplate
        Version: !GetAtt BackEndLaunchTemplate.LatestVersionNumber
      MinSize: "1"
      DesiredCapacity: "1"
      MaxSize: "3"
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: BackEndASG
          PropagateAtLaunch: true

  # ==================================================
  # 5) Scaling Policies (CPU-based)
  # ==================================================
  FrontEndScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: "FrontEndScaleOut"
      AutoScalingGroupName: !Ref FrontEndASG
      PolicyType: "TargetTrackingScaling"
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: "ASGAverageCPUUtilization"
        TargetValue: 30.0

  FrontEndScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: "FrontEndScaleIn"
      AutoScalingGroupName: !Ref FrontEndASG
      PolicyType: "TargetTrackingScaling"
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: "ASGAverageCPUUtilization"
        TargetValue: 30.0

  BackEndScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: "BackEndScaleOut"
      AutoScalingGroupName: !Ref BackEndASG
      PolicyType: "TargetTrackingScaling"
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: "ASGAverageCPUUtilization"
        TargetValue: 30.0

  BackEndScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: "BackEndScaleIn"
      AutoScalingGroupName: !Ref BackEndASG
      PolicyType: "TargetTrackingScaling"
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: "ASGAverageCPUUtilization"
        TargetValue: 30.0

Outputs:
  # ==================================================
  # 6) Outputs
  # ==================================================
  VPCId:
    Description: "The ID of the new VPC"
    Value: !Ref MainVPC

  PublicSubnetAId:
    Description: "ID of Public Subnet A"
    Value: !Ref PublicSubnetA

  PublicSubnetBId:
    Description: "ID of Public Subnet B"
    Value: !Ref PublicSubnetB

  FrontEndAutoScalingGroupName:
    Description: "Auto Scaling Group name for Front-End EC2 instances"
    Value: !Ref FrontEndASG

  BackEndAutoScalingGroupName:
    Description: "Auto Scaling Group name for Back-End EC2 instances"
    Value: !Ref BackEndASG
