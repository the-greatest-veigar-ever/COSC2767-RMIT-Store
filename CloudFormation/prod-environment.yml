AWSTemplateFormatVersion: "2010-09-09"
Description: "Production environment with custom VPC, ALB, Front-End and Back-End EC2 instances with Auto Scaling"

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing EC2 KeyPair for SSH access."

  ImageIdFrontEnd:
    Type: AWS::EC2::Image::Id
    Description: "The AMI ID for the Front-End EC2 instance."

  ImageIdBackEnd:
    Type: AWS::EC2::Image::Id
    Description: "The AMI ID for the Back-End EC2 instance."

  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: "CIDR block for the custom VPC"

  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: "CIDR block for Public Subnet 1"

  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: "CIDR block for Public Subnet 2"

  TrustedSSHCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: "CIDR block for SSH access to EC2 instances"

  SwarmMasterToken:
    Type: String
    Description: "Docker Swarm join token for worker nodes"

  SwarmMasterIP:
    Type: String
    Description: "Private IP address of the Docker Swarm master node"

  HostnameFE:
    Type: String
    Default: "FrontEnd"
    Description: "Hostname for Front-End EC2 instances"

  HostnameBE:
    Type: String
    Default: "BackEnd"
    Description: "Hostname for Back-End EC2 instances"

Resources:

  ########################
  # 1) VPC + Networking  #
  ########################

  ProdVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ProdVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ProdInternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ProdVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProdVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProdVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProdVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ################################
  # 2) Security Groups           #
  ################################

  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound HTTP on port 8080 for the ALB"
      VpcId: !Ref ProdVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        # (NEW) Allow inbound traffic on port 3000 for the back-end service
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2376
          ToPort: 2376
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2377
          ToPort: 2377
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 42827
          ToPort: 42827
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 4789
          ToPort: 4789
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSG

  # Front-End EC2 Security Group
  FrontEndSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Front-End EC2 Instance"
      VpcId: !Ref ProdVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref TrustedSSHCIDR # Restrict SSH access
        - IpProtocol: tcp
          FromPort: 2376
          ToPort: 2376
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2377
          ToPort: 2377
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 4789
          ToPort: 4789
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 42827
          ToPort: 42827
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: FrontEndSG

  # Back-End EC2 Security Group
  BackEndSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group for Back-End EC2 Instance"
      VpcId: !Ref ProdVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !GetAtt FrontEndSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !GetAtt FrontEndSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref TrustedSSHCIDR # Restrict SSH access
        - IpProtocol: tcp
          FromPort: 2376
          ToPort: 2376
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2377
          ToPort: 2377
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 7946
          ToPort: 7946
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 4789
          ToPort: 4789
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 42827
          ToPort: 42827
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: BackEndSG

  #####################################
  # 3) Load Balancer + Target Group   #
  #####################################

   AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "ProdALB"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "ProdTG"            # front-end
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref ProdVPC
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: "8080"
      HealthCheckPath: /
      Matcher:
        HttpCode: "200"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
    
    # (NEW) Target Group for the Back-End on port 3000
  AppTargetGroupBackEnd:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "ProdTGBackEnd"
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref ProdVPC
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: "3000"
      HealthCheckPath: /
      Matcher:
        HttpCode: "200"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Protocol: HTTP
      Port: 8080 # Changed to 8080
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup

  # (NEW) ALB Listener on port 3000 for back-end
  ALBListenerBackEnd:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Protocol: HTTP
      Port: 3000
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroupBackEnd

  #####################################
  # 4) Launch Templates                #
  #####################################

  # Launch Template for Front-End EC2 Instances
  FrontEndLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "FrontEndLaunchTemplate"
      LaunchTemplateData:
        InstanceType: t2.micro # Adjust as needed
        ImageId: !Ref ImageIdFrontEnd
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref FrontEndSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            HOSTNAME=${HostnameFE}
            hostnamectl set-hostname "$HOSTNAME"
            yum update -y
            yum install -y docker
            service docker start
            systemctl enable docker
            sudo docker swarm join --token ${SwarmMasterToken} ${SwarmMasterIP}:2377

  # Launch Template for Back-End EC2 Instances
  BackEndLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "BackEndLaunchTemplate"
      LaunchTemplateData:
        InstanceType: t2.micro # Adjust as needed
        ImageId: !Ref ImageIdBackEnd
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref BackEndSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            HOSTNAME=${HostnameBE}
            hostnamectl set-hostname "$HOSTNAME"
            yum update -y
            yum install -y docker
            service docker start
            systemctl enable docker
            sudo docker swarm join --token ${SwarmMasterToken} ${SwarmMasterIP}:2377

  #####################################
  # 5) Auto Scaling Groups             #
  #####################################

  # Auto Scaling Group for Front-End EC2 Instances
  FrontEndAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "FrontEndASG"
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontEndLaunchTemplate
        Version: !GetAtt FrontEndLaunchTemplate.LatestVersionNumber
      MinSize: "1"
      DesiredCapacity: "1"
      MaxSize: "3"
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref AppTargetGroup
      Tags:
        - Key: Name
          Value: FrontEndASG
          PropagateAtLaunch: true

  # Auto Scaling Group for Back-End EC2 Instances
  BackEndAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "BackEndASG"
      LaunchTemplate:
        LaunchTemplateId: !Ref BackEndLaunchTemplate
        Version: !GetAtt BackEndLaunchTemplate.LatestVersionNumber
      MinSize: "1"
      DesiredCapacity: "1"
      MaxSize: "3"
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

      # (NEW) Attach the back-end target group so these instances register on port 3000
      TargetGroupARNs:
        - !Ref AppTargetGroupBackEnd

      Tags:
        - Key: Name
          Value: BackEndASG
          PropagateAtLaunch: true

  #####################################
  # 6) Scaling Policies                #
  #####################################

  # Scaling Policy for Front-End ASG - Scale Out
  FrontEndScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: "FrontEndScaleOut"
      AutoScalingGroupName: !Ref FrontEndAutoScalingGroup
      PolicyType: "TargetTrackingScaling"
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: "ASGAverageCPUUtilization"
        TargetValue: 30.0

  # Scaling Policy for Front-End ASG - Scale In
  FrontEndScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: "FrontEndScaleIn"
      AutoScalingGroupName: !Ref FrontEndAutoScalingGroup
      PolicyType: "TargetTrackingScaling"
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: "ASGAverageCPUUtilization"
        TargetValue: 30.0

  # Scaling Policy for Back-End ASG - Scale Out
  BackEndScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: "BackEndScaleOut"
      AutoScalingGroupName: !Ref BackEndAutoScalingGroup
      PolicyType: "TargetTrackingScaling"
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: "ASGAverageCPUUtilization"
        TargetValue: 30.0

  # Scaling Policy for Back-End ASG - Scale In
  BackEndScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: "BackEndScaleIn"
      AutoScalingGroupName: !Ref BackEndAutoScalingGroup
      PolicyType: "TargetTrackingScaling"
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: "ASGAverageCPUUtilization"
        TargetValue: 30.0

Outputs:
  VPCId:
    Description: "The ID of the new VPC"
    Value: !Ref ProdVPC

  PublicSubnet1Id:
    Description: "First public subnet"
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: "Second public subnet"
    Value: !Ref PublicSubnet2

  LoadBalancerDNS:
    Description: "DNS name of the ALB"
    Value: !GetAtt AppLoadBalancer.DNSName

  FrontEndAutoScalingGroupName:
    Description: "Auto Scaling Group name for Front-End EC2 instances"
    Value: !Ref FrontEndAutoScalingGroup

  BackEndAutoScalingGroupName:
    Description: "Auto Scaling Group name for Back-End EC2 instances"
    Value: !Ref BackEndAutoScalingGroup
